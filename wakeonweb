#!/usr/bin/perl

use FindBin qw($Bin);
use lib "$Bin/extlib/lib/perl5/";
use Mojolicious::Lite;
use Mojo::File 'path';

my $config = plugin Config => {
    default => {
        database_file => "/etc/ethers",
        arp_command   => '/usr/sbin/arp',
    },
};

app->mode('production');
app->secrets( ['HTJVYGBtLzzo7vOb3Xg3'] );

patch '/update' => sub {
    my $db = self->get_db;

    for (qx($config->{arp_command})) {
        next if /^\?/;
        my ( $host, undef, $mac ) = split;
        next if $mac !~ /:/;
        $db->{$host} = $mac;
    }

    my $tempfile = path( $config->{database_file} . ".$$" );
    my $fh       = $tempfile->open('>');
    say $fh "# This file was autogenerated by wakeonweb. DO NOT EDIT";
    for my $host ( sort keys %$db ) {
        say $fh "$db->{$host} $host";
    }
    $fh->close;
    $tempfile->move_to( $config->{database_file}->to_string );

    shift->render( data => '', status => 201 );
};

helper get_db => sub {
    my $c = shift;
    open( my $fh, '<', $config->{database_file} )
      or die "Can't open $config->{database_file}: $!\n";

    my %db;
    while (<$fh>) {
        next if /^#/;
        next if /^\s*$/;
        my ( $mac, $host ) = split;
        $db{$host} = $mac;
    }
    return \%db;
};

get '/' => sub {
    my $c       = shift;
    my $db = $c->get_db;

    open( my $ping, '-|', 'oping', '-c3', keys %$db )
      or die "Can't call oping: $!\n";
    my %up;
    my $host;
    while (<$ping>) {
        if (/--- (.*) ping statistics/) {
            $host = $1;
        }
        elsif (/^\d+ packets transmitted, (\d+) received/) {
            $up{$host} = $1;
        }
    }
    $c->stash( db => $db );
    $c->stash( up => \%up );
    $c->render;
} => 'index';

post '/wake-up/:mac' => sub {
    my $c   = shift;
    my $mac = $c->stash('mac');
    my $hwaddr_re = join( ':', ('[0-9A-Fa-f]{1,2}') x 6 );
    if ( $mac !~ $hwaddr_re ) {
        $c->flash( output => 'Argument does not match a hardware address' );
    }
    else {
        $c->flash( output => qx(/usr/bin/wakeonlan $mac) );
    }
    $c->redirect_to('index');
} => 'wake_up';

app->start;

__DATA__

@@ style.css

th {
  text-align: left;
}

img {
    vertical-align: middle;
}

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    %= stylesheet 'style.css';
    <title>Wake-on-LAN</title>
</head>
<body>
    <h1>Wake-on-LAN</h1>
    <%= content %>
</body>
</html>

@@ index.html.ep
% layout 'default';

% if ( my $output = flash('output') ) {
<div><pre><%= $output %> <pre></div>
% }

<table>
    <thead>
        <tr>
            <th>Hostname</th>
            <th>MAC-Address</th>
        </tr>
    </thead>
    <tbody>
% for my $host ( sort keys %$db ) {
    % my $img_src =  $up->{$host} ? 'green-circle.svg' : 'red-circle.svg' ;
        <tr>
            <td> <img src="<%= url_for($img_src) %>"> <%= $host %></td>
            <td><%= $db->{$host} %></td>
            <td><%= button_to 'wake up' => 'wake_up' => { mac => $db->{$host} }  %></td>
        </tr>
% }
    </tbody>
</table>

@@ red-circle.svg

<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
    <circle cx="10" cy="10" r="8" stroke="black" fill="red"/>
</svg>

@@ green-circle.svg

<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
    <circle cx="10" cy="10" r="8" stroke="black" fill="green"/>
</svg>
