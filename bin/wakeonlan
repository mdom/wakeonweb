#!/usr/bin/perl

use FindBin qw($Bin);
use lib "./extlib/lib/perl5/";
use Mojolicious::Lite;
use Mojo::File 'path';
use IPC::Run3 'run3';

my $config = plugin Config => {
    default => {
        database_file => "$Bin/macs.txt",
        arp_command   => [ '/usr/sbin/arp', '-a' ],
    },
};

app->mode('production');
app->secrets( ['HTJVYGBtLzzo7vOb3Xg3'] );

patch '/update' => sub {
    my ( $stdout, $stderr );
    run3( $config->{arp_command}, \undef, \$stdout, \$stderr );

    my %macs;

    for my $line ( split( "\n", $stdout ) ) {
        next if $line =~ /^\?/;
        my @fields = split( ' ', $line );
        next unless $fields[3] =~ /:/;
        $macs{ $fields[0] } = $fields[3];
    }

    my $database = path( $config->{database_file} );

    if ( -e $database ) {
        my $fh = $database->open('<');
        while (<$fh>) {
            my @fields = split;
            $macs{ $fields[0] } = $fields[1];
        }
    }

    my $tempfile = path( $config->{database_file} . ".$$" );
    my $fh       = $tempfile->open('>');
    for my $name ( keys %macs ) {
        say $fh $name . ' ' . $macs{$name};
    }
    $fh->close;
    $tempfile->move_to( $database->to_string );

    shift->render( data => '', status => 201 );
};

helper get_records => sub {
    my $c = shift;
    open( my $fh, '<', $config->{database_file} )
      or die "Can't open $config->{database_file}: $!\n";

    my @records;
    while (<$fh>) {
        my @fields = split;
        push @records, { mac => $fields[1], name => $fields[0] };
    }
    return @records;
};

get '/' => sub {
    my $c       = shift;
    my @records = $c->get_records;

	my @hosts = map { $_->{name} } @records;
    open( my $nmap, '-|', 'nmap', '-sn', '-Pn', @hosts )
      or die "Can't call nmap: $!\n";
    my %up;
    while (<$nmap>) {
        if (/Nmap scan report for (\S+) \(/) {
            $up{$1} = 1;
        }
    }
    $c->stash( records => \@records );
    $c->stash( up      => \%up );
    $c->render;
} => 'index';

post '/wake-up/:mac' => sub {
    my $c = shift;
    my $output;
    run3 [ '/usr/bin/wakeonlan', $c->stash('mac') ], \undef, \$output, \$output;
    $c->flash( output => $output );
    $c->redirect_to('index');
} => 'wake_up';

app->start;

__DATA__

@@ style.css

th {
  text-align: left;
}

img {
	vertical-align: middle;
}

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	%= stylesheet 'style.css';
	<title>Wake-on-LAN</title>
</head>
<body>
	<h1>Wake-on-LAN</h1>
	<%= content %>
</body>
</html>

@@ index.html.ep
% layout 'default';

% if ( my $output = flash('output') ) {
<div><pre><%= $output %> <pre></div>
% }

<table>
    <thead>
        <tr>
            <th>Hostname</th>
            <th>MAC-Address</th>
        </tr>
    </thead>
    <tbody>
% for my $record ( @$records ) {
        <tr>
            <td> <img src="<%= $up->{$record->{name}} ? "green" : "red" %>-circle.svg"> <%= $record->{name} %></td>
            <td><%= $record->{mac} %></td>
            <td><%= button_to 'wake up' => 'wake_up' => { mac => $record->{mac} }  %></td>
        </tr>
% }
    </tbody>
</table>

@@ red-circle.svg

<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
	<circle cx="10" cy="10" r="10" stroke="black" fill="red"/>
</svg>

@@ green-circle.svg

<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
	<circle cx="10" cy="10" r="10" stroke="black" fill="green"/>
</svg>
